#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROTO_DIR="${ROOT_DIR}/api/proto"
OUT_DIR="${ROOT_DIR}"
TP_DIR="${ROOT_DIR}/third_party"
GA_DIR="${TP_DIR}/googleapis"
GW_DIR="${TP_DIR}/grpc-gateway"

need() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "❌ missing required tool: $1" >&2
    exit 1
  fi
}

cmd_mod_vendor() {
  mkdir -p "${TP_DIR}"
  if [ ! -d "${GA_DIR}/.git" ]; then
    echo "▶ cloning googleapis..."
    git clone --depth 1 https://github.com/googleapis/googleapis "${GA_DIR}"
  else
    echo "▶ updating googleapis..."
    git -C "${GA_DIR}" pull --ff-only
  fi

  if [ ! -d "${GW_DIR}/.git" ]; then
    echo "▶ cloning grpc-gateway..."
    git clone --depth 1 https://github.com/grpc-ecosystem/grpc-gateway "${GW_DIR}"
  else
    echo "▶ updating grpc-gateway..."
    git -C "${GW_DIR}" pull --ff-only
  fi

  echo "✅ third_party deps ready"
}

install_go_plugins() {
  echo "▶ installing protoc plugins..."
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
  go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
}

cmd_generate() {
  need protoc
  install_go_plugins

  GOBIN_DIR="${GOBIN:-$(go env GOPATH)/bin}"
  export PATH="${GOBIN_DIR}:${PATH}"

  mapfile -d '' PROTOS < <(find "${PROTO_DIR}" -name '*.proto' -print0)
  if [ ${#PROTOS[@]} -eq 0 ]; then
    echo "⚠️ no .proto files found in ${PROTO_DIR}"
    exit 0
  fi

  INC=( -I "${PROTO_DIR}" -I "${GA_DIR}" -I "${GW_DIR}" )
  OPENAPI_OUT="${ROOT_DIR}/api/openapi"
  mkdir -p "${OPENAPI_OUT}"

  protoc "${INC[@]}" \
    --go_out="${OUT_DIR}" --go_opt=paths=source_relative \
    --go-grpc_out="${OUT_DIR}" --go-grpc_opt=paths=source_relative \
    --grpc-gateway_out="${OUT_DIR}" \
      --grpc-gateway_opt=paths=source_relative \
      --grpc-gateway_opt=generate_unbound_methods=true \
    --openapiv2_out="${OPENAPI_OUT}" \
      --openapiv2_opt=logtostderr=true \
      --openapiv2_opt=json_names_for_fields=false \
    "${PROTOS[@]}"

  echo "✅ proto + gateway + openapi generated"
}

usage() {
  cat <<USAGE
easyp — proto helper

Usage:
  ./easyp mod vendor   # clone/update third_party deps (googleapis, grpc-gateway)
  ./easyp generate     # generate Go stubs + grpc-gateway + OpenAPI via protoc
USAGE
}

main() {
  sub="${1:-}"
  case "${sub}" in
    mod) [ "${2:-}" = "vendor" ] && cmd_mod_vendor || usage ;;
    generate) cmd_generate ;;
    *) usage; exit 1 ;;
  esac
}
main "$@"